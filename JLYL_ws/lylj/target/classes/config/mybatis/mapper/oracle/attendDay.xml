<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.it.lylj.attendDay.model.AttendDayDAO">
	<sql id="searchWhere">
	   <if test="selectNum ==1 and timeNum ==1 and searchKeyword !=null and searchKeyword!=''">
		 <![CDATA[
		 where SUM_TIME > (60*60)*TO_NUMBER(#{searchKeyword})
		 ]]>
	   </if>
	   <if test="selectNum==1 and timeNum==2 and searchKeyword!=null and searchKeyword!=''">
		 <![CDATA[
		 where SUM_TIME < (60*60)*TO_NUMBER(#{searchKeyword})
		 ]]>
	   </if>
	   <if test="selectNum==2 and searchKeyword!=null and searchKeyword!=''">
		 where EMP_NAME  like '%' || #{searchKeyword} || '%'
	   </if>
	</sql>
	
	<sql id="searchStats">
	   <if test="selectItem3 == 1 and startDate!=null and startDate!=''" >
		 <![CDATA[
		 AND ATTENDANCE_DAY_REGDATE BETWEEN TO_DATE(#{startDate}) AND TO_DATE(#{endDate})
		 ]]>
	   </if>
	   <if test="selectItem2 == 1 and searchDepart!=null and searchDepart!=''">
		 AND DEPARTMENT_NAME  like '%' || #{searchDepart} || '%'
	   </if>
	   <if test="selectItem1 == 1 and searchEmp!=null and searchEmp!=''">
		 AND EMP_NAME  like '%' || #{searchEmp} || '%'
	   </if>
	</sql>
	
	<sql id="searchBreak">
	   <if test="selectItem3 == 1 and startDate!=null and startDate!=''" >
		 <![CDATA[
		 AND (BREAKDAY_START BETWEEN TO_DATE(#{startDate}) AND TO_DATE(#{endDate}) OR 
		 BREAKDAY_END BETWEEN TO_DATE(#{startDate}) AND TO_DATE(#{endDate}))
		 ]]>
	   </if>
	   <if test="selectItem2 == 1 and searchDepart!=null and searchDepart!=''">
		 AND DEPARTMENT_NAME  like '%' || #{searchDepart} || '%'
	   </if>
	   <if test="selectItem1 == 1 and searchEmp!=null and searchEmp!=''">
		 AND EMP_NAME  like '%' || #{searchEmp} || '%'
	   </if>
	</sql>
	
	<sql id="searchView">
	   <if test="currentPage != 0 and currentPage!=null and currentPage!=''" >
		 <![CDATA[ where nums >12*(#{currentPage}-1) and nums<=12*#{currentPage} ]]>
	   </if>
	   
	</sql>
	
	<select id="selectAttendDayByRegdate" parameterType="attendDayVo" resultType="attendDayVo">
		select * from ATTENDDAY 
		where EMP_NO=#{empNo} and ATTENDANCE_DAY_REGDATE = TRUNC(TO_DATE(TO_CHAR(#{attendanceDayRegdate},'yyyy-mm-dd'),'yyyy-mm-dd'))
	</select>
	
	<select id="selectAttendDayByFlag" parameterType="int" resultType="conditionViewVo">
		select * from (select c.*, rownum as nums from conditionView c
		where ATTENDANCE_DAY_HOLIDAY_FLAG ='1')
		<![CDATA[ where nums >12*(#{currentPage}-1) and nums<=12*#{currentPage} ]]>
	</select>
	
	<select id="selecCnttAttendDayByFlag" resultType="int">
		select count(*) from conditionView 
		where ATTENDANCE_DAY_HOLIDAY_FLAG ='1'
	</select>
	
	<select id="selectAttendMonth" parameterType="hashmap" resultType="attendDayVo">
		select * from ATTENDDAY 
		where EMP_NO=#{empNo} and ATTENDANCE_DAY_REGDATE between TO_DATE(#{firstDate:VARCHAR}) and TO_DATE(#{lastDate:VARCHAR})
		order by ATTENDANCE_DAY_REGDATE
	</select>
	
	<select id="selectSumWeekWork" parameterType="int" resultType="int">
		select NVL(TRUNC(sum((ATTENDANCE_DAY_OFF_HOUR -ATTENDANCE_DAY_ON_HOUR)*24*60*60)),0)   from ATTENDDAY
		where ATTENDANCE_DAY_OFF_HOUR is not null and ATTENDANCE_DAY_REGDATE  between TRUNC(CURRENT_DATE,'d') and CURRENT_DATE and EMP_NO=#{empNo}
	</select>
	
	<select id="selectSumWeekWorkEx" parameterType="int" resultType="int">
		<![CDATA[
		SELECT NVL(SUM(CASE WHEN ATTENDANCE_DAY_OFF_HOUR > TO_DATE(TO_CHAR(ATTENDANCE_DAY_OFF_HOUR,'yyyy-MM-dd')||' 18:00:00','yyyy-MM-dd hh24:mi:ss')
                        THEN CASE WHEN ATTENDANCE_DAY_ON_HOUR  > TO_DATE(TO_CHAR(ATTENDANCE_DAY_ON_HOUR,'yyyy-MM-dd')||' 18:00:00','yyyy-MM-dd hh24:mi:ss')
                                  THEN NVL(TRUNC((ATTENDANCE_DAY_OFF_HOUR - to_date(to_char(ATTENDANCE_DAY_OFF_HOUR,'yyyy-MM-dd')||' 18:00:00','yyyy-MM-dd hh24:mi:ss'))*24*60*60
                                                                -(ATTENDANCE_DAY_ON_HOUR  - to_date(to_char(ATTENDANCE_DAY_OFF_HOUR,'yyyy-MM-dd')||' 18:00:00','yyyy-MM-dd hh24:mi:ss'))*24*60*60),0)
                                  ELSE NVL(TRUNC((ATTENDANCE_DAY_OFF_HOUR - to_date(to_char(ATTENDANCE_DAY_OFF_HOUR,'yyyy-MM-dd')||' 18:00:00','yyyy-MM-dd hh24:mi:ss'))*24*60*60),0)
                                  END 
                        WHEN ATTENDANCE_DAY_ON_HOUR  < TO_DATE(TO_CHAR(ATTENDANCE_DAY_ON_HOUR ,'yyyy-MM-dd')||' 09:00:00','yyyy-MM-dd hh24:mi:ss')
                        THEN CASE WHEN ATTENDANCE_DAY_OFF_HOUR   < TO_DATE(TO_CHAR(ATTENDANCE_DAY_ON_HOUR,'yyyy-MM-dd')||' 09:00:00','yyyy-MM-dd hh24:mi:ss')
                                  THEN NVL(TRUNC((to_date(to_char(ATTENDANCE_DAY_OFF_HOUR,'yyyy-MM-dd')||' 18:00:00','yyyy-MM-dd hh24:mi:ss')-ATTENDANCE_DAY_ON_HOUR)*24*60*60
                                                                -(to_date(to_char(ATTENDANCE_DAY_OFF_HOUR,'yyyy-MM-dd')||' 18:00:00','yyyy-MM-dd hh24:mi:ss')-ATTENDANCE_DAY_OFF_HOUR)*24*60*60),0)
                                  ELSE NVL(TRUNC((to_date(to_char(ATTENDANCE_DAY_OFF_HOUR,'yyyy-MM-dd')||' 18:00:00','yyyy-MM-dd hh24:mi:ss')-ATTENDANCE_DAY_ON_HOUR )*24*60*60),0)
                                  END
                        ELSE 0
                   END 
            ),0) AS EXCESSTIME
		
		FROM ATTENDDAY 
		WHERE ATTENDANCE_DAY_OFF_HOUR IS NOT NULL
		AND ATTENDANCE_DAY_REGDATE  BETWEEN TRUNC(CURRENT_DATE,'d') AND CURRENT_DATE and EMP_NO=#{empNo} AND ATTENDANCE_DAY_HOLIDAY_FLAG ='2'
		
		]]>
	</select>
	
	<select id="selectDayWorkEx" parameterType="hashmap" resultType="int">
		<![CDATA[
		SELECT NVL(SUM(CASE WHEN ATTENDANCE_DAY_OFF_HOUR > TO_DATE(TO_CHAR(ATTENDANCE_DAY_OFF_HOUR,'yyyy-MM-dd')||' 18:00:00','yyyy-MM-dd hh24:mi:ss')
                        THEN CASE WHEN ATTENDANCE_DAY_ON_HOUR  > TO_DATE(TO_CHAR(ATTENDANCE_DAY_ON_HOUR,'yyyy-MM-dd')||' 18:00:00','yyyy-MM-dd hh24:mi:ss')
                                  THEN NVL(TRUNC((ATTENDANCE_DAY_OFF_HOUR - to_date(to_char(ATTENDANCE_DAY_OFF_HOUR,'yyyy-MM-dd')||' 18:00:00','yyyy-MM-dd hh24:mi:ss'))*24*60*60
                                                                -(ATTENDANCE_DAY_ON_HOUR  - to_date(to_char(ATTENDANCE_DAY_OFF_HOUR,'yyyy-MM-dd')||' 18:00:00','yyyy-MM-dd hh24:mi:ss'))*24*60*60),0)
                                  ELSE NVL(TRUNC((ATTENDANCE_DAY_OFF_HOUR - to_date(to_char(ATTENDANCE_DAY_OFF_HOUR,'yyyy-MM-dd')||' 18:00:00','yyyy-MM-dd hh24:mi:ss'))*24*60*60),0)
                                  END 
                        WHEN ATTENDANCE_DAY_ON_HOUR  < TO_DATE(TO_CHAR(ATTENDANCE_DAY_ON_HOUR ,'yyyy-MM-dd')||' 09:00:00','yyyy-MM-dd hh24:mi:ss')
                        THEN CASE WHEN ATTENDANCE_DAY_OFF_HOUR   < TO_DATE(TO_CHAR(ATTENDANCE_DAY_ON_HOUR,'yyyy-MM-dd')||' 09:00:00','yyyy-MM-dd hh24:mi:ss')
                                  THEN NVL(TRUNC((to_date(to_char(ATTENDANCE_DAY_OFF_HOUR,'yyyy-MM-dd')||' 18:00:00','yyyy-MM-dd hh24:mi:ss')-ATTENDANCE_DAY_ON_HOUR)*24*60*60
                                                                -(to_date(to_char(ATTENDANCE_DAY_OFF_HOUR,'yyyy-MM-dd')||' 18:00:00','yyyy-MM-dd hh24:mi:ss')-ATTENDANCE_DAY_OFF_HOUR)*24*60*60),0)
                                  ELSE NVL(TRUNC((to_date(to_char(ATTENDANCE_DAY_OFF_HOUR,'yyyy-MM-dd')||' 18:00:00','yyyy-MM-dd hh24:mi:ss')-ATTENDANCE_DAY_ON_HOUR )*24*60*60),0)
                                  END
                        ELSE 0
                   END 
            ),0) AS EXCESSTIME

		FROM ATTENDDAY 
		WHERE ATTENDANCE_DAY_OFF_HOUR IS NOT NULL
		AND ATTENDANCE_DAY_REGDATE = TO_DATE(TO_CHAR(#{selectDay},'yyyy-mm-dd'),'yyyy-mm-dd') and EMP_NO=#{empNo}
		]]>
	</select>
	
	<select id="selectSumMonthWork" parameterType="hashmap" resultType="int">
		select NVL(TRUNC(sum((ATTENDANCE_DAY_OFF_HOUR -ATTENDANCE_DAY_ON_HOUR)*24*60*60)),0)   from ATTENDDAY
		where ATTENDANCE_DAY_OFF_HOUR is not null and ATTENDANCE_DAY_REGDATE  between TRUNC(TO_DATE(#{nowDate}),'MM') AND ADD_MONTHS( TRUNC(TO_DATE(#{nowDate}),'MM'), 1) AND EMP_NO=#{empNo}
	</select>
	
	<select id="selectLeftTimeWeek" parameterType="int" resultType="int">
		<![CDATA[
		SELECT (40*60*60)-NVL(SUM(
                        NVL((
                        CASE WHEN ATTENDANCE_DAY_OFF_HOUR > TO_DATE(TO_CHAR(ATTENDANCE_DAY_OFF_HOUR,'yyyy-MM-dd')||' 18:00:00','yyyy-MM-dd hh24:mi:ss')
                        THEN TO_DATE(TO_CHAR(ATTENDANCE_DAY_OFF_HOUR,'yyyy-MM-dd')||' 18:00:00','yyyy-MM-dd hh24:mi:ss')
                        ELSE ATTENDANCE_DAY_OFF_HOUR
                        END 
                        -
                        CASE WHEN ATTENDANCE_DAY_ON_HOUR  < TO_DATE(TO_CHAR(ATTENDANCE_DAY_ON_HOUR ,'yyyy-MM-dd')||' 09:00:00','yyyy-MM-dd hh24:mi:ss')
                        THEN TO_DATE(TO_CHAR(ATTENDANCE_DAY_ON_HOUR ,'yyyy-MM-dd')||' 09:00:00','yyyy-MM-dd hh24:mi:ss')
                        ELSE ATTENDANCE_DAY_ON_HOUR
                        END 
                        )*24*60*60,0)
            ),0) AS EXCESSTIME

		FROM ATTENDDAY 
		WHERE ATTENDANCE_DAY_OFF_HOUR IS NOT NULL
		AND ATTENDANCE_DAY_REGDATE  BETWEEN TRUNC(CURRENT_DATE,'d') AND CURRENT_DATE and EMP_NO=#{empNo}
		]]>
	</select>
	
	<select id="selectSumMonthWorkEx" parameterType="hashmap" resultType="int">
		<![CDATA[
		SELECT NVL(SUM(CASE WHEN ATTENDANCE_DAY_OFF_HOUR > TO_DATE(TO_CHAR(ATTENDANCE_DAY_OFF_HOUR,'yyyy-MM-dd')||' 18:00:00','yyyy-MM-dd hh24:mi:ss')
                        THEN CASE WHEN ATTENDANCE_DAY_ON_HOUR  > TO_DATE(TO_CHAR(ATTENDANCE_DAY_ON_HOUR,'yyyy-MM-dd')||' 18:00:00','yyyy-MM-dd hh24:mi:ss')
                                  THEN NVL(TRUNC((ATTENDANCE_DAY_OFF_HOUR - to_date(to_char(ATTENDANCE_DAY_OFF_HOUR,'yyyy-MM-dd')||' 18:00:00','yyyy-MM-dd hh24:mi:ss'))*24*60*60
                                                                -(ATTENDANCE_DAY_ON_HOUR  - to_date(to_char(ATTENDANCE_DAY_OFF_HOUR,'yyyy-MM-dd')||' 18:00:00','yyyy-MM-dd hh24:mi:ss'))*24*60*60),0)
                                  ELSE NVL(TRUNC((ATTENDANCE_DAY_OFF_HOUR - to_date(to_char(ATTENDANCE_DAY_OFF_HOUR,'yyyy-MM-dd')||' 18:00:00','yyyy-MM-dd hh24:mi:ss'))*24*60*60),0)
                                  END 
                        WHEN ATTENDANCE_DAY_ON_HOUR  < TO_DATE(TO_CHAR(ATTENDANCE_DAY_ON_HOUR ,'yyyy-MM-dd')||' 09:00:00','yyyy-MM-dd hh24:mi:ss')
                        THEN CASE WHEN ATTENDANCE_DAY_OFF_HOUR   < TO_DATE(TO_CHAR(ATTENDANCE_DAY_ON_HOUR,'yyyy-MM-dd')||' 09:00:00','yyyy-MM-dd hh24:mi:ss')
                                  THEN NVL(TRUNC((to_date(to_char(ATTENDANCE_DAY_OFF_HOUR,'yyyy-MM-dd')||' 09:00:00','yyyy-MM-dd hh24:mi:ss')-ATTENDANCE_DAY_ON_HOUR)*24*60*60
                                                                -(to_date(to_char(ATTENDANCE_DAY_OFF_HOUR,'yyyy-MM-dd')||' 09:00:00','yyyy-MM-dd hh24:mi:ss')-ATTENDANCE_DAY_OFF_HOUR)*24*60*60),0)
                                  ELSE NVL(TRUNC((to_date(to_char(ATTENDANCE_DAY_OFF_HOUR,'yyyy-MM-dd')||' 09:00:00','yyyy-MM-dd hh24:mi:ss')-ATTENDANCE_DAY_ON_HOUR )*24*60*60),0)
                                  END
                        ELSE 0
                   END 
            ),0) AS EXCESSTIME

		FROM ATTENDDAY 
		WHERE ATTENDANCE_DAY_OFF_HOUR IS NOT NULL
		AND ATTENDANCE_DAY_REGDATE  BETWEEN TRUNC(TO_DATE(#{nowDate}),'MM') AND ADD_MONTHS( TRUNC(TO_DATE(#{nowDate}),'MM'), 1) AND EMP_NO=#{empNo}
		AND ATTENDANCE_DAY_HOLIDAY_FLAG ='2'
		]]>
	</select>
	
	<select id="selectSumWeekWorkByMonth" resultType="int" parameterType="hashmap">
		select NVL(TRUNC(SUM((ATTENDANCE_DAY_OFF_HOUR -ATTENDANCE_DAY_ON_HOUR)*24*60*60)),0)   from ATTENDDAY
		where ATTENDANCE_DAY_OFF_HOUR is not null and ATTENDANCE_DAY_REGDATE  between TO_DATE(#{startDate:VARCHAR}) and TO_DATE(#{endDate:VARCHAR}) and EMP_NO=${empNo}
	</select>
	
	<insert id="insertAttendDay" parameterType="attendDayVo">
		insert into ATTENDDAY 
		values(ATTENDDAY_SEQ.nextval, #{empNo}, #{attendanceDayOnHour}, #{attendanceDayOffHour:DATE},
		#{attendanceDayWorkHour:DATE},#{attendanceDayHolidayFlag:VARCHAR},#{attendanceDayRegdate})
	</insert>
	
	<update id="updateAttendDayByOffHour" parameterType="attendDayVo">
		update ATTENDDAY set ATTENDANCE_DAY_OFF_HOUR=#{attendanceDayOffHour},
		ATTENDANCE_DAY_WORK_HOUR=#{attendanceDayWorkHour}
		where EMP_NO=#{empNo} and ATTENDANCE_DAY_REGDATE = TO_DATE(TO_CHAR(#{attendanceDayRegdate},'yyyy-mm-dd'),'yyyy-mm-dd')
	</update>
	
	<update id="updateAttendDayByFlag" parameterType="hashmap">
		update ATTENDDAY set ATTENDANCE_DAY_HOLIDAY_FLAG =#{flag}
		where ATTENDANCE_DAY_NO =#{attendanceDayNo}
	</update>
	
	<parameterMap type="attendDayVo" id="updateAttendDayParam">
		<parameter property="empNo" javaType="int" jdbcType="NUMERIC" mode="IN"/>
		<parameter property="attendanceDayOnHour" javaType="Date" jdbcType="DATE" mode="IN"/>
		<parameter property="attendanceDayOffHour" javaType="Date" jdbcType="DATE" mode="IN"/>
		<parameter property="attendanceDayWorkHour" javaType="Date" jdbcType="DATE" mode="IN"/>
		<parameter property="attendanceDayRegdate" javaType="Date" jdbcType="DATE" mode="IN"/>
	</parameterMap>
	
	<update id="updateAttendDay" parameterMap="updateAttendDayParam">
		call updateAttendDay(?,?,?,?,?)
	</update>
	
	<update id="updateAutoOffHour" >
		call updateAutoOffHour()
	</update>
	
	
	<select id="selectSumConditionByGroup" parameterType="hashmap" resultType="map">
		<![CDATA[
		select * from (select EMP_NO, DEPARTMENT_NAME, POSITION_NAME, EMP_NAME,
			NVL(TRUNC(sum((ATTENDANCE_DAY_OFF_HOUR -ATTENDANCE_DAY_ON_HOUR)*24*60*60)),0) as SUM_TIME,
            NVL(SUM(CASE WHEN ATTENDANCE_DAY_OFF_HOUR > TO_DATE(TO_CHAR(ATTENDANCE_DAY_OFF_HOUR,'yyyy-MM-dd')||' 18:00:00','yyyy-MM-dd hh24:mi:ss')
                        THEN CASE WHEN ATTENDANCE_DAY_ON_HOUR  > TO_DATE(TO_CHAR(ATTENDANCE_DAY_ON_HOUR,'yyyy-MM-dd')||' 18:00:00','yyyy-MM-dd hh24:mi:ss')
                                  THEN NVL(TRUNC((ATTENDANCE_DAY_OFF_HOUR - to_date(to_char(ATTENDANCE_DAY_OFF_HOUR,'yyyy-MM-dd')||' 18:00:00','yyyy-MM-dd hh24:mi:ss'))*24*60*60
                                                                -(ATTENDANCE_DAY_ON_HOUR  - to_date(to_char(ATTENDANCE_DAY_OFF_HOUR,'yyyy-MM-dd')||' 18:00:00','yyyy-MM-dd hh24:mi:ss'))*24*60*60),0)
                                  ELSE NVL(TRUNC((ATTENDANCE_DAY_OFF_HOUR - to_date(to_char(ATTENDANCE_DAY_OFF_HOUR,'yyyy-MM-dd')||' 18:00:00','yyyy-MM-dd hh24:mi:ss'))*24*60*60),0)
                                  END 
                        WHEN ATTENDANCE_DAY_ON_HOUR  < TO_DATE(TO_CHAR(ATTENDANCE_DAY_ON_HOUR ,'yyyy-MM-dd')||' 09:00:00','yyyy-MM-dd hh24:mi:ss')
                        THEN CASE WHEN ATTENDANCE_DAY_OFF_HOUR   < TO_DATE(TO_CHAR(ATTENDANCE_DAY_ON_HOUR,'yyyy-MM-dd')||' 09:00:00','yyyy-MM-dd hh24:mi:ss')
                                  THEN NVL(TRUNC((to_date(to_char(ATTENDANCE_DAY_OFF_HOUR,'yyyy-MM-dd')||' 18:00:00','yyyy-MM-dd hh24:mi:ss')-ATTENDANCE_DAY_ON_HOUR)*24*60*60
                                                                -(to_date(to_char(ATTENDANCE_DAY_OFF_HOUR,'yyyy-MM-dd')||' 18:00:00','yyyy-MM-dd hh24:mi:ss')-ATTENDANCE_DAY_OFF_HOUR)*24*60*60),0)
                                  ELSE NVL(TRUNC((to_date(to_char(ATTENDANCE_DAY_OFF_HOUR,'yyyy-MM-dd')||' 18:00:00','yyyy-MM-dd hh24:mi:ss')-ATTENDANCE_DAY_ON_HOUR )*24*60*60),0)
                                  END
                        ELSE 0
                   END 
            ),0) AS EXCESS_TIME,
            NVL(SUM(CASE WHEN ATTENDANCE_DAY_OFF_HOUR > TO_DATE(TO_CHAR(ATTENDANCE_DAY_OFF_HOUR,'yyyy-MM-dd')||' 18:00:00','yyyy-MM-dd hh24:mi:ss')
                        THEN CASE WHEN ATTENDANCE_DAY_ON_HOUR  < TO_DATE(TO_CHAR(ATTENDANCE_DAY_ON_HOUR,'yyyy-MM-dd')||' 09:00:00','yyyy-MM-dd hh24:mi:ss')
                                  THEN NVL(TRUNC((to_date(to_char(ATTENDANCE_DAY_OFF_HOUR,'yyyy-MM-dd')||' 18:00:00','yyyy-MM-dd hh24:mi:ss')
                                                                -to_date(to_char(ATTENDANCE_DAY_OFF_HOUR,'yyyy-MM-dd')||' 09:00:00','yyyy-MM-dd hh24:mi:ss'))*24*60*60),0)
                                  WHEN ATTENDANCE_DAY_ON_HOUR >= TO_DATE(TO_CHAR(ATTENDANCE_DAY_ON_HOUR,'yyyy-MM-dd')||' 09:00:00','yyyy-MM-dd hh24:mi:ss') AND
                                             ATTENDANCE_DAY_ON_HOUR < TO_DATE(TO_CHAR(ATTENDANCE_DAY_ON_HOUR,'yyyy-MM-dd')||' 18:00:00','yyyy-MM-dd hh24:mi:ss')
                                  THEN NVL(TRUNC((to_date(to_char(ATTENDANCE_DAY_OFF_HOUR,'yyyy-MM-dd')||' 18:00:00','yyyy-MM-dd hh24:mi:ss')-ATTENDANCE_DAY_ON_HOUR)*24*60*60),0)
                                  ELSE 0
                                  END 
                        WHEN ATTENDANCE_DAY_OFF_HOUR  > TO_DATE(TO_CHAR(ATTENDANCE_DAY_ON_HOUR ,'yyyy-MM-dd')||' 09:00:00','yyyy-MM-dd hh24:mi:ss') AND
                                   ATTENDANCE_DAY_OFF_HOUR  <= TO_DATE(TO_CHAR(ATTENDANCE_DAY_ON_HOUR ,'yyyy-MM-dd')||' 18:00:00','yyyy-MM-dd hh24:mi:ss')
                        THEN CASE WHEN ATTENDANCE_DAY_ON_HOUR  < TO_DATE(TO_CHAR(ATTENDANCE_DAY_ON_HOUR,'yyyy-MM-dd')||' 09:00:00','yyyy-MM-dd hh24:mi:ss')
                                  THEN NVL(TRUNC((ATTENDANCE_DAY_OFF_HOUR-to_date(to_char(ATTENDANCE_DAY_OFF_HOUR,'yyyy-MM-dd')||' 09:00:00','yyyy-MM-dd hh24:mi:ss'))*24*60*60),0)
                                  WHEN ATTENDANCE_DAY_ON_HOUR  >= TO_DATE(TO_CHAR(ATTENDANCE_DAY_ON_HOUR,'yyyy-MM-dd')||' 09:00:00','yyyy-MM-dd hh24:mi:ss')
                                  THEN NVL(TRUNC((ATTENDANCE_DAY_OFF_HOUR-ATTENDANCE_DAY_ON_HOUR )*24*60*60),0)
                                  ELSE 0
                                  END
                        ELSE 0
                   END 
            ),0) AS NORMAL_TIME
		from conditionview
		
		where department_no =#{departmentNo} and ATTENDANCE_DAY_OFF_HOUR is not null and ATTENDANCE_DAY_REGDATE  between TRUNC(TO_DATE(#{selectDate},'yyyy-mm-dd'),'d') and TO_DATE(#{selectDate},'yyyy-mm-dd') 
		group by EMP_NO,DEPARTMENT_NAME,POSITION_NAME, EMP_NAME)
		]]>
		<include refid="searchWhere"/>
		
		
	</select>
	
	<select id="selectAllConditionByDepartMent" parameterType="hashmap" resultType="conditionViewVO">
		select * from CONDITIONVIEW
		where department_no =#{departmentNo} and ATTENDANCE_DAY_REGDATE  between TRUNC(TO_DATE(#{selectDate},'yyyy-mm-dd'),'d') and TO_DATE(#{selectDate},'yyyy-mm-dd')
		order by ATTENDANCE_DAY_NO
		
	</select>
	
	<select id="selectAllConditionByMonth" parameterType="hashmap" resultType="conditionViewVO">
		select * from (select c.*, rownum as nums from CONDITIONVIEW c
		where ATTENDANCE_DAY_REGDATE  between TRUNC(TO_DATE(#{selectDate},'yyyy-mm-dd'),'MM') and ADD_MONTHS( TRUNC(TO_DATE(#{selectDate}),'MM'), 1) 
		AND ATTENDANCE_DAY_OFF_HOUR is not null
		<include refid="searchStats"/>
		order by ATTENDANCE_DAY_NO, DEPARTMENT_NO)
		<include refid="searchView"/>
	</select>
	<select id="selectAllCntConditionByMonth" parameterType="hashmap" resultType="int">
		select count(*) from (select c.*, rownum as nums from CONDITIONVIEW c
		where ATTENDANCE_DAY_REGDATE  between TRUNC(TO_DATE(#{selectDate},'yyyy-mm-dd'),'MM') and ADD_MONTHS( TRUNC(TO_DATE(#{selectDate}),'MM'), 1) 
		<include refid="searchStats"/>
		order by ATTENDANCE_DAY_NO, DEPARTMENT_NO)
		
	</select>
	
	<select id="selectCntConditionByMonth" parameterType="hashmap" resultType="int">
		select count(distinct(emp_name)) from CONDITIONVIEW
		where ATTENDANCE_DAY_REGDATE  between TRUNC(TO_DATE(#{selectDate},'yyyy-mm-dd'),'MM') and ADD_MONTHS( TRUNC(TO_DATE(#{selectDate}),'MM'), 1) 
		<include refid="searchStats"/>
		order by ATTENDANCE_DAY_NO, DEPARTMENT_NO
	</select>
	
	<select id="selectCntBreakDayByMonth" parameterType="hashmap" resultType="int">
		select count(*) from BREAKVIEW
		where (BREAKDAY_START between TRUNC(TO_DATE(#{selectDate},'yyyy-mm-dd'),'MM') and ADD_MONTHS( TRUNC(TO_DATE(#{selectDate}),'MM'), 1) 
		OR BREAKDAY_END between TRUNC(TO_DATE(#{selectDate},'yyyy-mm-dd'),'MM') and ADD_MONTHS( TRUNC(TO_DATE(#{selectDate}),'MM'), 1))
		<include refid="searchBreak"/>
	</select>
	
 </mapper>









