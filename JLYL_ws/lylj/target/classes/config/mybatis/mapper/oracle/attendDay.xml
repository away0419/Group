<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.it.lylj.attendDay.model.AttendDayDAO">

	<select id="selectAttendDayByRegdate" parameterType="attendDayVo" resultType="attendDayVo">
		select * from ATTENDDAY 
		where EMP_NO=#{empNo} and ATTENDANCE_DAY_REGDATE = TRUNC(#{attendanceDayRegdate})
	</select>
	
	<select id="selectAttendMonth" parameterType="hashmap" resultType="attendDayVo">
		select * from ATTENDDAY 
		where EMP_NO=#{empNo} and ATTENDANCE_DAY_REGDATE between TO_DATE(#{firstDate:VARCHAR}) and TO_DATE(#{lastDate:VARCHAR})
		order by ATTENDANCE_DAY_REGDATE
	</select>
	
	<select id="selectSumWeekWork" parameterType="int" resultType="int">
		select NVL(TRUNC(sum((ATTENDANCE_DAY_OFF_HOUR -ATTENDANCE_DAY_ON_HOUR)*24*60*60)),0)   from ATTENDDAY
		where ATTENDANCE_DAY_OFF_HOUR is not null and ATTENDANCE_DAY_REGDATE  between TRUNC(SYSDATE,'d') and SYSDATE and EMP_NO=#{empNo}
	</select>
	
	<select id="selectSumWeekWorkEx" parameterType="int" resultType="int">
		<![CDATA[
		SELECT NVL(SUM(CASE WHEN ATTENDANCE_DAY_OFF_HOUR > TO_DATE(TO_CHAR(ATTENDANCE_DAY_OFF_HOUR,'yyyy-MM-dd')||' 18:00:00','yyyy-MM-dd hh24:mi:ss')
                        THEN CASE WHEN ATTENDANCE_DAY_ON_HOUR  > TO_DATE(TO_CHAR(ATTENDANCE_DAY_ON_HOUR,'yyyy-MM-dd')||' 18:00:00','yyyy-MM-dd hh24:mi:ss')
                                  THEN NVL(TRUNC((ATTENDANCE_DAY_OFF_HOUR - to_date(to_char(ATTENDANCE_DAY_OFF_HOUR,'yyyy-MM-dd')||' 18:00:00','yyyy-MM-dd hh24:mi:ss'))*24*60*60
                                                                -(ATTENDANCE_DAY_ON_HOUR  - to_date(to_char(ATTENDANCE_DAY_OFF_HOUR,'yyyy-MM-dd')||' 18:00:00','yyyy-MM-dd hh24:mi:ss'))*24*60*60),0)
                                  ELSE NVL(TRUNC((ATTENDANCE_DAY_OFF_HOUR - to_date(to_char(ATTENDANCE_DAY_OFF_HOUR,'yyyy-MM-dd')||' 18:00:00','yyyy-MM-dd hh24:mi:ss'))*24*60*60),0)
                                  END 
                        WHEN ATTENDANCE_DAY_ON_HOUR  < TO_DATE(TO_CHAR(ATTENDANCE_DAY_ON_HOUR ,'yyyy-MM-dd')||' 09:00:00','yyyy-MM-dd hh24:mi:ss')
                        THEN CASE WHEN ATTENDANCE_DAY_OFF_HOUR   < TO_DATE(TO_CHAR(ATTENDANCE_DAY_ON_HOUR,'yyyy-MM-dd')||' 09:00:00','yyyy-MM-dd hh24:mi:ss')
                                  THEN NVL(TRUNC((to_date(to_char(ATTENDANCE_DAY_OFF_HOUR,'yyyy-MM-dd')||' 18:00:00','yyyy-MM-dd hh24:mi:ss')-ATTENDANCE_DAY_ON_HOUR)*24*60*60
                                                                -(to_date(to_char(ATTENDANCE_DAY_OFF_HOUR,'yyyy-MM-dd')||' 18:00:00','yyyy-MM-dd hh24:mi:ss')-ATTENDANCE_DAY_OFF_HOUR)*24*60*60),0)
                                  ELSE NVL(TRUNC((to_date(to_char(ATTENDANCE_DAY_OFF_HOUR,'yyyy-MM-dd')||' 18:00:00','yyyy-MM-dd hh24:mi:ss')-ATTENDANCE_DAY_ON_HOUR )*24*60*60),0)
                                  END
                        ELSE 0
                   END 
            ),0) AS EXCESSTIME

		FROM ATTENDDAY 
		WHERE ATTENDANCE_DAY_OFF_HOUR IS NOT NULL
		AND ATTENDANCE_DAY_REGDATE  BETWEEN TRUNC(SYSDATE,'d') AND SYSDATE and EMP_NO=#{empNo}
		
		]]>
	</select>
	
	<select id="selectDayWorkEx" parameterType="hashmap" resultType="int">
		<![CDATA[
		SELECT NVL(SUM(CASE WHEN ATTENDANCE_DAY_OFF_HOUR > TO_DATE(TO_CHAR(ATTENDANCE_DAY_OFF_HOUR,'yyyy-MM-dd')||' 18:00:00','yyyy-MM-dd hh24:mi:ss')
                        THEN CASE WHEN ATTENDANCE_DAY_ON_HOUR  > TO_DATE(TO_CHAR(ATTENDANCE_DAY_ON_HOUR,'yyyy-MM-dd')||' 18:00:00','yyyy-MM-dd hh24:mi:ss')
                                  THEN NVL(TRUNC((ATTENDANCE_DAY_OFF_HOUR - to_date(to_char(ATTENDANCE_DAY_OFF_HOUR,'yyyy-MM-dd')||' 18:00:00','yyyy-MM-dd hh24:mi:ss'))*24*60*60
                                                                -(ATTENDANCE_DAY_ON_HOUR  - to_date(to_char(ATTENDANCE_DAY_OFF_HOUR,'yyyy-MM-dd')||' 18:00:00','yyyy-MM-dd hh24:mi:ss'))*24*60*60),0)
                                  ELSE NVL(TRUNC((ATTENDANCE_DAY_OFF_HOUR - to_date(to_char(ATTENDANCE_DAY_OFF_HOUR,'yyyy-MM-dd')||' 18:00:00','yyyy-MM-dd hh24:mi:ss'))*24*60*60),0)
                                  END 
                        WHEN ATTENDANCE_DAY_ON_HOUR  < TO_DATE(TO_CHAR(ATTENDANCE_DAY_ON_HOUR ,'yyyy-MM-dd')||' 09:00:00','yyyy-MM-dd hh24:mi:ss')
                        THEN CASE WHEN ATTENDANCE_DAY_OFF_HOUR   < TO_DATE(TO_CHAR(ATTENDANCE_DAY_ON_HOUR,'yyyy-MM-dd')||' 09:00:00','yyyy-MM-dd hh24:mi:ss')
                                  THEN NVL(TRUNC((to_date(to_char(ATTENDANCE_DAY_OFF_HOUR,'yyyy-MM-dd')||' 18:00:00','yyyy-MM-dd hh24:mi:ss')-ATTENDANCE_DAY_ON_HOUR)*24*60*60
                                                                -(to_date(to_char(ATTENDANCE_DAY_OFF_HOUR,'yyyy-MM-dd')||' 18:00:00','yyyy-MM-dd hh24:mi:ss')-ATTENDANCE_DAY_OFF_HOUR)*24*60*60),0)
                                  ELSE NVL(TRUNC((to_date(to_char(ATTENDANCE_DAY_OFF_HOUR,'yyyy-MM-dd')||' 18:00:00','yyyy-MM-dd hh24:mi:ss')-ATTENDANCE_DAY_ON_HOUR )*24*60*60),0)
                                  END
                        ELSE 0
                   END 
            ),0) AS EXCESSTIME

		FROM ATTENDDAY 
		WHERE ATTENDANCE_DAY_OFF_HOUR IS NOT NULL
		AND ATTENDANCE_DAY_REGDATE = #{selectDay} and EMP_NO=#{empNo}
		]]>
	</select>
	
	<select id="selectSumMonthWork" parameterType="hashmap" resultType="int">
		select NVL(TRUNC(sum((ATTENDANCE_DAY_OFF_HOUR -ATTENDANCE_DAY_ON_HOUR)*24*60*60)),0)   from ATTENDDAY
		where ATTENDANCE_DAY_OFF_HOUR is not null and ATTENDANCE_DAY_REGDATE  between TRUNC(TO_DATE(#{nowDate}),'MM') AND ADD_MONTHS( TRUNC(TO_DATE(#{nowDate}),'MM'), 1) AND EMP_NO=#{empNo}
	</select>
	
	<select id="selectLeftTimeWeek" parameterType="int" resultType="int">
		<![CDATA[
		SELECT (40*60*60)-NVL(SUM(
                        NVL((
                        CASE WHEN ATTENDANCE_DAY_OFF_HOUR > TO_DATE(TO_CHAR(ATTENDANCE_DAY_OFF_HOUR,'yyyy-MM-dd')||' 18:00:00','yyyy-MM-dd hh24:mi:ss')
                        THEN TO_DATE(TO_CHAR(ATTENDANCE_DAY_OFF_HOUR,'yyyy-MM-dd')||' 18:00:00','yyyy-MM-dd hh24:mi:ss')
                        ELSE ATTENDANCE_DAY_OFF_HOUR
                        END 
                        -
                        CASE WHEN ATTENDANCE_DAY_ON_HOUR  < TO_DATE(TO_CHAR(ATTENDANCE_DAY_ON_HOUR ,'yyyy-MM-dd')||' 09:00:00','yyyy-MM-dd hh24:mi:ss')
                        THEN TO_DATE(TO_CHAR(ATTENDANCE_DAY_ON_HOUR ,'yyyy-MM-dd')||' 09:00:00','yyyy-MM-dd hh24:mi:ss')
                        ELSE ATTENDANCE_DAY_ON_HOUR
                        END 
                        )*24*60*60,0)
            ),0) AS EXCESSTIME

		FROM ATTENDDAY 
		WHERE ATTENDANCE_DAY_OFF_HOUR IS NOT NULL
		AND ATTENDANCE_DAY_REGDATE  BETWEEN TRUNC(SYSDATE,'d') AND SYSDATE and EMP_NO=#{empNo}
		]]>
	</select>
	
	<select id="selectSumMonthWorkEx" parameterType="hashmap" resultType="int">
		<![CDATA[
		SELECT NVL(SUM(CASE WHEN ATTENDANCE_DAY_OFF_HOUR > TO_DATE(TO_CHAR(ATTENDANCE_DAY_OFF_HOUR,'yyyy-MM-dd')||' 18:00:00','yyyy-MM-dd hh24:mi:ss')
                        THEN CASE WHEN ATTENDANCE_DAY_ON_HOUR  > TO_DATE(TO_CHAR(ATTENDANCE_DAY_ON_HOUR,'yyyy-MM-dd')||' 18:00:00','yyyy-MM-dd hh24:mi:ss')
                                  THEN NVL(TRUNC((ATTENDANCE_DAY_OFF_HOUR - to_date(to_char(ATTENDANCE_DAY_OFF_HOUR,'yyyy-MM-dd')||' 18:00:00','yyyy-MM-dd hh24:mi:ss'))*24*60*60
                                                                -(ATTENDANCE_DAY_ON_HOUR  - to_date(to_char(ATTENDANCE_DAY_OFF_HOUR,'yyyy-MM-dd')||' 18:00:00','yyyy-MM-dd hh24:mi:ss'))*24*60*60),0)
                                  ELSE NVL(TRUNC((ATTENDANCE_DAY_OFF_HOUR - to_date(to_char(ATTENDANCE_DAY_OFF_HOUR,'yyyy-MM-dd')||' 18:00:00','yyyy-MM-dd hh24:mi:ss'))*24*60*60),0)
                                  END 
                        WHEN ATTENDANCE_DAY_ON_HOUR  < TO_DATE(TO_CHAR(ATTENDANCE_DAY_ON_HOUR ,'yyyy-MM-dd')||' 09:00:00','yyyy-MM-dd hh24:mi:ss')
                        THEN CASE WHEN ATTENDANCE_DAY_OFF_HOUR   < TO_DATE(TO_CHAR(ATTENDANCE_DAY_ON_HOUR,'yyyy-MM-dd')||' 09:00:00','yyyy-MM-dd hh24:mi:ss')
                                  THEN NVL(TRUNC((to_date(to_char(ATTENDANCE_DAY_OFF_HOUR,'yyyy-MM-dd')||' 09:00:00','yyyy-MM-dd hh24:mi:ss')-ATTENDANCE_DAY_ON_HOUR)*24*60*60
                                                                -(to_date(to_char(ATTENDANCE_DAY_OFF_HOUR,'yyyy-MM-dd')||' 09:00:00','yyyy-MM-dd hh24:mi:ss')-ATTENDANCE_DAY_OFF_HOUR)*24*60*60),0)
                                  ELSE NVL(TRUNC((to_date(to_char(ATTENDANCE_DAY_OFF_HOUR,'yyyy-MM-dd')||' 09:00:00','yyyy-MM-dd hh24:mi:ss')-ATTENDANCE_DAY_ON_HOUR )*24*60*60),0)
                                  END
                        ELSE 0
                   END 
            ),0) AS EXCESSTIME

		FROM ATTENDDAY 
		WHERE ATTENDANCE_DAY_OFF_HOUR IS NOT NULL
		AND ATTENDANCE_DAY_REGDATE  BETWEEN TRUNC(TO_DATE(#{nowDate}),'MM') AND ADD_MONTHS( TRUNC(TO_DATE(#{nowDate}),'MM'), 1) AND EMP_NO=#{empNo}
		]]>
	</select>
	
	<select id="selectSumWeekWorkByMonth" resultType="int" parameterType="hashmap">
		select NVL(TRUNC(SUM((ATTENDANCE_DAY_OFF_HOUR -ATTENDANCE_DAY_ON_HOUR)*24*60*60)),0)   from ATTENDDAY
		where ATTENDANCE_DAY_OFF_HOUR is not null and ATTENDANCE_DAY_REGDATE  between TO_DATE(#{startDate:VARCHAR}) and TO_DATE(#{endDate:VARCHAR}) and EMP_NO=${empNo}
	</select>
	
	<insert id="insertAttendDay" parameterType="attendDayVo">
		insert into ATTENDDAY 
		values(ATTENDDAY_SEQ.nextval, #{empNo}, #{attendanceDayOnHour}, #{attendanceDayOffHour:DATE},
		#{attendanceDayWorkHour:DATE},#{attendanceDayHolidayFlag:VARCHAR},#{attendanceDayRegdate})
	</insert>
	
	<update id="updateAttendDayByOffHour" parameterType="attendDayVo">
		update ATTENDDAY set ATTENDANCE_DAY_OFF_HOUR=#{attendanceDayOffHour},
		ATTENDANCE_DAY_WORK_HOUR=#{attendanceDayWorkHour}
		where EMP_NO=#{empNo} and ATTENDANCE_DAY_REGDATE =#{attendanceDayRegdate}
	</update>
	
	<parameterMap type="attendDayVo" id="updateAttendDayParam">
		<parameter property="empNo" javaType="int" jdbcType="NUMERIC" mode="IN"/>
		<parameter property="attendanceDayOnHour" javaType="Date" jdbcType="DATE" mode="IN"/>
		<parameter property="attendanceDayOffHour" javaType="Date" jdbcType="DATE" mode="IN"/>
		<parameter property="attendanceDayWorkHour" javaType="Date" jdbcType="DATE" mode="IN"/>
		<parameter property="attendanceDayRegdate" javaType="Date" jdbcType="DATE" mode="IN"/>
	</parameterMap>
	
	<update id="updateAttendDay" parameterMap="updateAttendDayParam">
		call updateAttendDay(?,?,?,?,?)
	</update>
	
	
 </mapper>









